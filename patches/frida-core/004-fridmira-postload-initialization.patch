From bc4fe68ca19f1e54f8cd82198a5e8bfff7aa48e6 Mon Sep 17 00:00:00 2001
From: imkenf <imkenf@gmail.com>
Date: Mon, 16 Jun 2025 12:02:22 +0800
Subject: [PATCH 004/007] FridMira post-preload initialization

---
 src/control-service.vala | 74 +++++++++++++++++++++++++++++++++++++---
 1 file changed, 69 insertions(+), 5 deletions(-)

diff --git a/src/control-service.vala b/src/control-service.vala
index cc64470..1dbf8ba 100644
--- a/src/control-service.vala
+++ b/src/control-service.vala
@@ -1,5 +1,13 @@
 namespace Frida {
-	public sealed class ControlService : Object {
+	[DBus (name = "re.frida.Control")]
+	private interface Control : GLib.Object {
+		// ... existing code ...
+	}
+
+	[CCode (cname = "_frida_internal_init_fridmira")]
+	internal extern void initialize_fridmira () throws IOError;
+
+	public class ControlService : Object {
 		public EndpointParameters endpoint_params {
 			get;
 			construct;
@@ -97,6 +105,41 @@ namespace Frida {
 			main_handler = new ConnectionHandler (this, null);
 		}
 
+		private class FridMiraEnvBackup {
+			private string?[] values;
+			private static string[] KEYS = {
+				"FRIDMIRA_MODE",
+				"FRIDMIRA_SYMBOL_MODE",
+				"FRIDMIRA_THREAD_MODE",
+				"FRIDMIRA_RPC_MODE",
+				"FRIDMIRA_FILE_MODE",
+				"FRIDMIRA_GUM_MODE"
+			};
+
+			public FridMiraEnvBackup () {
+				values = new string?[KEYS.length];
+				for (int i = 0; i < KEYS.length; i++) {
+					values[i] = Environment.get_variable (KEYS[i]);
+				}
+			}
+
+			public void unset_all () {
+				for (int i = 0; i < KEYS.length; i++) {
+					if (values[i] != null) {
+						Environment.unset_variable (KEYS[i]);
+					}
+				}
+			}
+
+			public void restore () {
+				for (int i = 0; i < KEYS.length; i++) {
+					if (values[i] != null) {
+						Environment.set_variable (KEYS[i], values[i], true);
+					}
+				}
+			}
+		}
+
 		private void assign_session (HostSession session, HostSessionProvider provider) {
 			host_session = session;
 			host_session.spawn_added.connect (notify_spawn_added);
@@ -110,6 +153,8 @@ namespace Frida {
 			host_session.uninjected.connect (notify_uninjected);
 
 			this.provider = provider;
+
+			service.incoming.connect (on_server_connection);
 		}
 
 		public async void start (Cancellable? cancellable = null) throws Error, IOError {
@@ -119,15 +164,34 @@ namespace Frida {
 
 			main_context = MainContext.ref_thread_default ();
 
-			service.incoming.connect (on_server_connection);
-
 			try {
 				yield service.start (cancellable);
 
 				if (options.enable_preload) {
 					var base_host_session = host_session as LocalHostSession;
-					if (base_host_session != null)
-						base_host_session.preload.begin (io_cancellable);
+					if (base_host_session != null) {
+						var env_backup = new FridMiraEnvBackup ();
+						env_backup.unset_all ();
+						try {
+							yield base_host_session.preload (io_cancellable);
+						} finally {
+							env_backup.restore ();
+						}
+					}
+				}
+
+				// GOLDEN MOMENT: Initialize FridMira framework AFTER preload completion
+				// 黄金时刻：在preload完成后初始化FridMira框架
+				// Implementation of "post-preload initialization" strategy from analysis document
+				// 实施分析文档中的"预加载后初始化"策略
+				try {
+					initialize_fridmira ();
+				} catch (IOError e) {
+					// Log error but don't fail the service start
+					// 记录错误但不让服务启动失败
+					stderr.printf ("FridMira: FATAL - Framework initialization failed: %s. Service will continue without FridMira protection.\n", e.message);
+					// Mark as disabled so other parts of the system know it's not active.
+					GLib.Environment.set_variable ("FRIDMIRA_MODE_EFFECTIVE", "disabled", true);
 				}
 
 				state = STARTED;
-- 
2.45.1.windows.1

