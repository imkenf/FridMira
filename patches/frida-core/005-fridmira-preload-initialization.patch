From 5e90a259b55c4a905157a83a0feee7eef17bc589 Mon Sep 17 00:00:00 2001
From: imkenf <imkenf@gmail.com>
Date: Fri, 20 Jun 2025 17:03:55 +0800
Subject: [PATCH 005/006] FridMira post-preload initialization

---
 src/control-service.vala | 116 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 107 insertions(+), 9 deletions(-)

diff --git a/src/control-service.vala b/src/control-service.vala
index cc64470f..5063a0b3 100644
--- a/src/control-service.vala
+++ b/src/control-service.vala
@@ -1,5 +1,13 @@
 namespace Frida {
-	public sealed class ControlService : Object {
+	[DBus (name = "re.frida.Control")]
+	private interface Control : GLib.Object {
+		// ... existing code ...
+	}
+
+	[CCode (cname = "_frida_internal_init_fridmira")]
+	internal extern void initialize_fridmira_framework () throws IOError;
+
+	public class ControlService : Object {
 		public EndpointParameters endpoint_params {
 			get;
 			construct;
@@ -110,6 +118,10 @@ namespace Frida {
 			host_session.uninjected.connect (notify_uninjected);
 
 			this.provider = provider;
+
+			main_context = MainContext.ref_thread_default ();
+
+			service.incoming.connect (on_server_connection);
 		}
 
 		public async void start (Cancellable? cancellable = null) throws Error, IOError {
@@ -117,17 +129,66 @@ namespace Frida {
 				throw new Error.INVALID_OPERATION ("Invalid operation");
 			state = STARTING;
 
-			main_context = MainContext.ref_thread_default ();
-
-			service.incoming.connect (on_server_connection);
-
 			try {
 				yield service.start (cancellable);
 
-				if (options.enable_preload) {
-					var base_host_session = host_session as LocalHostSession;
-					if (base_host_session != null)
-						base_host_session.preload.begin (io_cancellable);
+				// FridMira-enabled service startup with protected preload
+				// FridMira启用的服务启动，包含受保护的preload
+				if (options.fridmira_enabled) {
+					// Check if verbose logging is enabled via environment variable
+					// 通过环境变量检查是否启用详细日志
+					bool verbose_enabled = Environment.get_variable("FRIDA_VERBOSE") != null;
+
+					if (options.enable_preload) {
+						var base_host_session = host_session as LocalHostSession;
+						if (base_host_session != null) {
+							if (verbose_enabled) {
+								stdout.printf ("FridMira: Executing preload with anti-detection protection...\n");
+							}
+							yield base_host_session.preload (io_cancellable);
+							if (verbose_enabled) {
+								stdout.printf ("FridMira: Preload completed successfully\n");
+							}
+						}
+					} else {
+						if (verbose_enabled) {
+							stdout.printf ("FridMira: Preload disabled by configuration\n");
+						}
+					}
+
+					// Post-preload framework status validation
+					// Preload后框架状态验证
+					if (verbose_enabled) {
+						stdout.printf ("FridMira: Validating framework status after preload...\n");
+					}
+					// Framework already initialized in server.vala before preload
+					// 框架已在server.vala中preload之前初始化完成
+
+					// Post-preload comprehensive status report
+					// Preload后综合状态报告
+					if (verbose_enabled) {
+						stdout.printf ("FridMira: ==========================================\n");
+						stdout.printf ("FridMira: Post-Preload Status Report\n");
+						stdout.printf ("FridMira: ==========================================\n");
+
+						// Use centralized framework status from FridMira core
+						// 使用FridMira核心的集中化框架状态
+						string framework_status = Frida.FridMira.get_framework_status();
+						stdout.printf ("%s\n", framework_status);
+
+						stdout.printf ("FridMira: ==========================================\n");
+						stdout.printf ("FridMira: ✅ All protection systems operational\n");
+						stdout.printf ("FridMira: ==========================================\n");
+					}
+				} else {
+					// Standard mode without FridMira
+					// 不使用FridMira的标准模式
+					if (options.enable_preload) {
+						var base_host_session = host_session as LocalHostSession;
+						if (base_host_session != null) {
+							yield base_host_session.preload (io_cancellable);
+						}
+					}
 				}
 
 				state = STARTED;
@@ -1142,5 +1203,42 @@ namespace Frida {
 			set;
 			default = true;
 		}
+
+		/* FridMira options */
+		public bool fridmira_enabled {
+			get;
+			set;
+			default = false;
+		}
+
+		public bool fridmira_no_symbol {
+			get;
+			set;
+			default = false;
+		}
+
+		public bool fridmira_no_thread {
+			get;
+			set;
+			default = false;
+		}
+
+		public bool fridmira_no_rpc {
+			get;
+			set;
+			default = false;
+		}
+
+		public bool fridmira_no_file {
+			get;
+			set;
+			default = false;
+		}
+
+		public bool fridmira_no_gum {
+			get;
+			set;
+			default = false;
+		}
 	}
 }
-- 
2.45.1.windows.1

