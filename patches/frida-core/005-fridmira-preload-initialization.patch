From e5078d020abe67afb3f4606458caae835664b36d Mon Sep 17 00:00:00 2001
From: imkenf <imkenf@gmail.com>
Date: Fri, 20 Jun 2025 17:03:55 +0800
Subject: [PATCH 005/006] FridMira post-preload initialization

---
 src/control-service.vala | 133 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 124 insertions(+), 9 deletions(-)

diff --git a/src/control-service.vala b/src/control-service.vala
index cc64470f..8ad64d05 100644
--- a/src/control-service.vala
+++ b/src/control-service.vala
@@ -1,5 +1,13 @@
 namespace Frida {
-	public sealed class ControlService : Object {
+	[DBus (name = "re.frida.Control")]
+	private interface Control : GLib.Object {
+		// ... existing code ...
+	}
+
+	[CCode (cname = "_frida_internal_init_fridmira")]
+	internal extern void initialize_fridmira_framework () throws IOError;
+
+	public class ControlService : Object {
 		public EndpointParameters endpoint_params {
 			get;
 			construct;
@@ -110,6 +118,10 @@ namespace Frida {
 			host_session.uninjected.connect (notify_uninjected);
 
 			this.provider = provider;
+
+			main_context = MainContext.ref_thread_default ();
+
+			service.incoming.connect (on_server_connection);
 		}
 
 		public async void start (Cancellable? cancellable = null) throws Error, IOError {
@@ -117,17 +129,83 @@ namespace Frida {
 				throw new Error.INVALID_OPERATION ("Invalid operation");
 			state = STARTING;
 
-			main_context = MainContext.ref_thread_default ();
-
-			service.incoming.connect (on_server_connection);
-
 			try {
 				yield service.start (cancellable);
 
-				if (options.enable_preload) {
-					var base_host_session = host_session as LocalHostSession;
-					if (base_host_session != null)
-						base_host_session.preload.begin (io_cancellable);
+				// FridMira-enabled service startup with protected preload
+				// FridMira启用的服务启动，包含受保护的preload
+				if (options.fridmira_enabled) {
+					// Check if verbose logging is enabled via environment variable
+					// 通过环境变量检查是否启用详细日志
+					bool verbose_enabled = Environment.get_variable("FRIDA_VERBOSE") != null;
+
+					if (options.enable_preload) {
+						var base_host_session = host_session as LocalHostSession;
+						if (base_host_session != null) {
+							if (verbose_enabled) {
+								stdout.printf ("FridMira: Executing protected preload...\n");
+								stdout.flush (); // Ensure output is immediately visible
+							}
+							try {
+								yield base_host_session.preload (io_cancellable);
+								if (verbose_enabled) {
+									stdout.printf ("FridMira: Preload complete\n");
+									stdout.flush ();
+								}
+							} catch (Error e) {
+								// IMPORTANT: Always show preload failures regardless of verbose mode
+								// 重要：无论是否verbose模式都显示preload失败信息
+								stderr.printf ("FridMira: PRELOAD FAILED - %s\n", e.message);
+								stderr.printf ("FridMira: Error Type: %s\n", e.get_type().name());
+								stderr.printf ("FridMira: Error Domain: %s (Code: %d)\n",
+								              e.domain.to_string(), e.code);
+
+								if (verbose_enabled) {
+									stderr.printf ("FridMira: Detailed Analysis:\n");
+									stderr.printf ("FridMira:   - This may indicate system compatibility issues\n");
+									stderr.printf ("FridMira:   - Check if target process architecture matches server\n");
+									stderr.printf ("FridMira:   - Verify system permissions and SELinux/AppArmor policies\n");
+									stderr.printf ("FridMira:   - Try running with --no-preload flag if issues persist\n");
+								}
+
+								stderr.printf ("FridMira: Continuing server startup without preload...\n");
+								stderr.flush ();
+
+								// Continue execution even if preload fails
+								// 即使preload失败也继续执行
+							}
+						}
+					} else {
+						if (verbose_enabled) {
+							stdout.printf ("FridMira: Preload disabled by configuration\n");
+						}
+					}
+
+					// Preload后详细框架状态报告
+					// Final status summary
+					if (verbose_enabled) {
+						int active_modules = 0;
+						active_modules += !options.fridmira_no_symbol ? 1 : 0;
+						active_modules += !options.fridmira_no_thread ? 1 : 0;
+						active_modules += !options.fridmira_no_rpc ? 1 : 0;
+						active_modules += !options.fridmira_no_file ? 1 : 0;
+						active_modules += !options.fridmira_no_gum ? 1 : 0;
+						// Agent Management默认禁用，需要FRIDMIRA_AGENT_MODE=1
+						string? agent_mode = GLib.Environment.get_variable("FRIDMIRA_AGENT_MODE");
+						active_modules += (agent_mode == "1") ? 1 : 0;
+
+						stdout.printf ("FridMira: Server ready - %d/6 modules active\n", active_modules);
+						stdout.printf ("FridMira: ======================================\n");
+					}
+				} else {
+					// Standard mode without FridMira
+					// 不使用FridMira的标准模式
+					if (options.enable_preload) {
+						var base_host_session = host_session as LocalHostSession;
+						if (base_host_session != null) {
+							yield base_host_session.preload (io_cancellable);
+						}
+					}
 				}
 
 				state = STARTED;
@@ -1142,5 +1220,42 @@ namespace Frida {
 			set;
 			default = true;
 		}
+
+		/* FridMira options */
+		public bool fridmira_enabled {
+			get;
+			set;
+			default = false;
+		}
+
+		public bool fridmira_no_symbol {
+			get;
+			set;
+			default = false;
+		}
+
+		public bool fridmira_no_thread {
+			get;
+			set;
+			default = false;
+		}
+
+		public bool fridmira_no_rpc {
+			get;
+			set;
+			default = false;
+		}
+
+		public bool fridmira_no_file {
+			get;
+			set;
+			default = false;
+		}
+
+		public bool fridmira_no_gum {
+			get;
+			set;
+			default = false;
+		}
 	}
 }
-- 
2.45.1.windows.1

