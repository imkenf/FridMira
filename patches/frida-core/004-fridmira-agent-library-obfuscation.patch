From c1439e7a8f34757dd82a51f5807ebb1b6df6d53d Mon Sep 17 00:00:00 2001
From: imkenf <imkenf@gmail.com>
Date: Fri, 20 Jun 2025 17:01:27 +0800
Subject: [PATCH 004/006] FridMira Agent Library Management Module

---
 src/agent-container.vala              | 31 ++++++++++++++++++++++++++-
 src/host-session-service.vala         | 21 ++++++++++++++++--
 src/linux/linux-host-session.vala     | 20 ++++++++++++++++-
 src/windows/windows-host-session.vala | 19 +++++++++-------
 4 files changed, 79 insertions(+), 12 deletions(-)

diff --git a/src/agent-container.vala b/src/agent-container.vala
index eecfa1f6..c4244aaa 100644
--- a/src/agent-container.vala
+++ b/src/agent-container.vala
@@ -21,12 +21,34 @@ namespace Frida {
 		public static async AgentContainer create (string agent_filename, Cancellable? cancellable) throws Error, IOError {
 			var container = new AgentContainer ();
 
+			// FridMira: Agent library obfuscation (DISABLED by default for compatibility)
+			// FridMira: Agent库混淆（默认禁用以确保兼容性）
+			// Only activated when FRIDMIRA_AGENT_MODE=1 is explicitly set
+			// 只有明确设置FRIDMIRA_AGENT_MODE=1时才激活
+			string actual_agent_path = agent_filename;
+
 			try {
-				container.module = new Module (agent_filename, 0);
+				// This function checks internally if Agent obfuscation is enabled
+				// 此函数内部检查是否启用Agent混淆
+				actual_agent_path = FridMiraAgentLibraryManager.create_obfuscated_agent_copy(agent_filename);
+			} catch (Error e) {
+				// Graceful fallback - no impact on standard Frida operation
+				// 优雅回退 - 不影响标准Frida操作
+				if (Environment.get_variable("FRIDMIRA_VERBOSE") == "1") {
+					stderr.printf("FridMira: Agent obfuscation failed, using standard path: %s\n", e.message);
+				}
+			}
+
+			try {
+				container.module = new Module (actual_agent_path, 0);
 			} catch (ModuleError e) {
 				throw new Error.PERMISSION_DENIED ("%s", e.message);
 			}
 
+			// FridMira: Resolve obfuscated Agent entry point symbol
+			// FridMira: 解析混淆的Agent入口点符号
+			// Standard Agent entry point lookup - symbol obfuscation requires compile-time patching
+			// 标准Agent入口点查找 - 符号混淆需要编译时补丁
 			void * main_func_symbol;
 			var main_func_found = container.module.symbol ("frida_agent_main", out main_func_symbol);
 			assert (main_func_found);
@@ -100,6 +122,13 @@ namespace Frida {
 #endif
 
 			module = null;
+
+			// FridMira: Clean up obfuscated Agent library files for complete stealth
+			// FridMira: Safe cleanup of Agent resources (no-op if obfuscation disabled)
+			// FridMira: 安全清理Agent资源（如果混淆禁用则无操作）
+			// Only cleans up if Agent obfuscation was actually used
+			// 只有在实际使用Agent混淆时才清理
+			FridMiraAgentLibraryManager.cleanup_agent_files();
 		}
 
 		private void start_worker_thread () {
diff --git a/src/host-session-service.vala b/src/host-session-service.vala
index b7a0c167..dab1bbfb 100644
--- a/src/host-session-service.vala
+++ b/src/host-session-service.vala
@@ -662,8 +662,25 @@ namespace Frida {
 			return null;
 		}
 
-		protected string make_agent_parameters (uint pid, string remote_address, HashTable<string, Variant> options) throws Error {
-			var parameters = new StringBuilder (remote_address);
+		protected string make_agent_parameters (uint pid, string remote_address, HashTable<string, Variant> options, Json.Object? extra) throws Error {
+			var parameters = new StringBuilder ();
+
+			var data = new Json.Object ();
+			data.set_string_member ("address", remote_address);
+			if (extra != null) {
+				/*
+				 * FridMira: Pass RPC configuration to the agent so it can use
+				 * the same obfuscated protocol as the server, especially
+				 * important for the preload agent.
+				 *
+				 * FridMira: 将RPC配置传递给agent，以便它能使用与服务器相同
+				 * 的混淆协议，这对preload agent尤其重要。
+				 */
+				extra.foreach_member ((o, name, val) => {
+					data.set_member (name, val.copy ());
+				});
+			}
+			parameters.append (data.to_string ());
 
 			string[] features = { "exceptor", "exit-monitor", "thread-suspend-monitor" };
 			bool is_system_session = pid == 0;
diff --git a/src/linux/linux-host-session.vala b/src/linux/linux-host-session.vala
index 55a0fbec..55032d52 100644
--- a/src/linux/linux-host-session.vala
+++ b/src/linux/linux-host-session.vala
@@ -360,8 +360,26 @@ namespace Frida {
 		protected override async Future<IOStream> perform_attach_to (uint pid, HashTable<string, Variant> options,
 				Cancellable? cancellable, out Object? transport) throws Error, IOError {
 			uint id;
+
+			// Standard Agent entry point - symbol obfuscation requires compile-time patching
+			// 标准Agent入口点 - 符号混淆需要编译时补丁
 			string entrypoint = "frida_agent_main";
-			string parameters = make_agent_parameters (pid, "", options);
+
+			/*
+			 * FridMira: Prepare RPC configuration to be passed to the agent.
+			 * This ensures that even agents injected during preload can
+			 * communicate using the obfuscated protocol.
+			 *
+			 * FridMira: 准备要传递给agent的RPC配置。
+			 * 这确保了即使是在preload期间注入的agent也能使用混淆协议进行通信。
+			 */
+			var extra_params = new Json.Object ();
+			if (RpcClient.enhancer != null) {
+				extra_params.set_string_member ("protocol", RpcClient.enhancer.get_protocol_id (null));
+				extra_params.set_string_member ("command", RpcClient.enhancer.get_call_command (null));
+			}
+
+			string parameters = make_agent_parameters (pid, "", options, extra_params);
 			AgentFeatures features = CONTROL_CHANNEL;
 			var linjector = (Linjector) injector;
 #if HAVE_EMBEDDED_ASSETS
diff --git a/src/windows/windows-host-session.vala b/src/windows/windows-host-session.vala
index 1f9c32eb..26518e6c 100644
--- a/src/windows/windows-host-session.vala
+++ b/src/windows/windows-host-session.vala
@@ -218,16 +218,19 @@ namespace Frida {
 			System.kill (pid);
 		}
 
-		protected override async Future<IOStream> perform_attach_to (uint pid, HashTable<string, Variant> options,
-				Cancellable? cancellable, out Object? transport) throws Error, IOError {
-			var t = new PipeTransport ();
+			protected override async Future<IOStream> perform_attach_to (uint pid, HashTable<string, Variant> options,
+			Cancellable? cancellable, out Object? transport) throws Error, IOError {
+		var t = new PipeTransport ();
 
-			var stream_request = Pipe.open (t.local_address, cancellable);
+		var stream_request = Pipe.open (t.local_address, cancellable);
 
-			var winjector = injector as Winjector;
-			var id = yield winjector.inject_library_resource (pid, agent, "frida_agent_main",
-				make_agent_parameters (pid, t.remote_address, options), cancellable);
-			injectee_by_pid[pid] = id;
+		var winjector = injector as Winjector;
+
+		// Standard Agent entry point - symbol obfuscation requires compile-time patching
+		// 标准Agent入口点 - 符号混淆需要编译时补丁
+		var id = yield winjector.inject_library_resource (pid, agent, "frida_agent_main",
+			make_agent_parameters (pid, t.remote_address, options), cancellable);
+		injectee_by_pid[pid] = id;
 
 			transport = t;
 
-- 
2.45.1.windows.1

