From 5cab11c76ff8f03dab5234cae5237076cc0815ea Mon Sep 17 00:00:00 2001
From: imkenf <imkenf@gmail.com>
Date: Sat, 14 Jun 2025 23:36:57 +0800
Subject: [PATCH 003/006] Integrate FridMira server functionality

---
 server/server.vala | 318 +++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 308 insertions(+), 10 deletions(-)

diff --git a/server/server.vala b/server/server.vala
index 67bf4b3..bf13ff0 100644
--- a/server/server.vala
+++ b/server/server.vala
@@ -18,6 +18,16 @@ namespace Frida.Server {
 	private static bool report_crashes = true;
 	private static bool verbose = false;
 
+	// FridMira anti-detection framework control variables
+	// FridMira反检测框架控制变量
+	private static bool fridmira_enabled = false;
+	private static bool fridmira_no_symbol = false;
+	private static bool fridmira_no_thread = false;
+	private static bool fridmira_no_rpc = false;
+	private static bool fridmira_no_file = false;
+	private static bool fridmira_no_gum = false;
+	private static bool fridmira_no_preload = false;
+
 	private enum PolicySoftenerFlavor {
 		SYSTEM,
 		INTERNAL;
@@ -29,6 +39,67 @@ namespace Frida.Server {
 
 	private delegate void ReadyHandler (bool success);
 
+	/**
+	 * Process FridMira environment variables with hierarchical priority
+	 * 处理FridMira环境变量，采用分层优先级机制
+	 *
+	 * Priority order (highest to lowest):
+	 * 优先级顺序（从高到低）：
+	 * 1. Command line arguments / 命令行参数
+	 * 2. Environment variables / 环境变量
+	 * 3. Default values / 默认值
+	 */
+	private static void process_fridmira_environment_variables () {
+		// Process environment variables as default values
+		// 处理环境变量作为默认值
+		// CLI arguments will override these settings
+		// CLI参数将覆盖这些设置
+
+		// Check global FridMira mode environment variable
+		// 检查全局FridMira模式环境变量
+		string? fridmira_mode = GLib.Environment.get_variable ("FRIDMIRA_MODE");
+		if (fridmira_mode != null && fridmira_mode.down () == "enabled") {
+			fridmira_enabled = true;
+		}
+
+		// Process individual feature environment variables
+		// 处理各个功能的环境变量
+		string? symbol_mode = GLib.Environment.get_variable ("FRIDMIRA_SYMBOL_MODE");
+		if (symbol_mode != null && symbol_mode.down () == "disabled") {
+			// Disable symbol obfuscation
+			// 禁用符号混淆
+			fridmira_no_symbol = true;
+		}
+
+		string? thread_mode = GLib.Environment.get_variable ("FRIDMIRA_THREAD_MODE");
+		if (thread_mode != null && thread_mode.down () == "disabled") {
+			// Disable thread obfuscation
+			// 禁用线程混淆
+			fridmira_no_thread = true;
+		}
+
+		string? rpc_mode = GLib.Environment.get_variable ("FRIDMIRA_RPC_MODE");
+		if (rpc_mode != null && rpc_mode.down () == "disabled") {
+			// Disable RPC obfuscation
+			// 禁用RPC混淆
+			fridmira_no_rpc = true;
+		}
+
+		string? file_mode = GLib.Environment.get_variable ("FRIDMIRA_FILE_MODE");
+		if (file_mode != null && file_mode.down () == "disabled") {
+			// Disable file obfuscation
+			// 禁用文件混淆
+			fridmira_no_file = true;
+		}
+
+		string? gum_mode = GLib.Environment.get_variable ("FRIDMIRA_GUM_MODE");
+		if (gum_mode != null && gum_mode.down () == "disabled") {
+			// Disable GUM memory obfuscation
+			// 禁用GUM内存混淆
+			fridmira_no_gum = true;
+		}
+	}
+
 	const OptionEntry[] option_entries = {
 		{ "version", 0, 0, OptionArg.NONE, ref output_version, "Output version information and exit", null },
 		{ "device", 0, 0, OptionArg.STRING, ref device_id, "Serve device with the given ID", "ID" },
@@ -48,6 +119,23 @@ namespace Frida.Server {
 		{ "ignore-crashes", 'C', OptionFlags.REVERSE, OptionArg.NONE, ref report_crashes,
 			"Disable native crash reporter integration", null },
 		{ "verbose", 'v', 0, OptionArg.NONE, ref verbose, "Be verbose", null },
+
+		// FridMira anti-detection framework command line options
+		// FridMira反检测框架命令行选项
+		{ "fridmira", 0, 0, OptionArg.NONE, ref fridmira_enabled,
+			"Enable FridMira anti-detection framework", null },
+		{ "no-symbol", 0, 0, OptionArg.NONE, ref fridmira_no_symbol,
+			"Disable symbol obfuscation (requires --fridmira)", null },
+		{ "no-thread", 0, 0, OptionArg.NONE, ref fridmira_no_thread,
+			"Disable thread obfuscation (requires --fridmira)", null },
+		{ "no-rpc", 0, 0, OptionArg.NONE, ref fridmira_no_rpc,
+			"Disable RPC obfuscation (requires --fridmira)", null },
+		{ "no-file", 0, 0, OptionArg.NONE, ref fridmira_no_file,
+			"Disable file obfuscation (requires --fridmira)", null },
+		{ "no-gum", 0, 0, OptionArg.NONE, ref fridmira_no_gum,
+			"Disable GUM memory obfuscation (requires --fridmira)", null },
+		{ "no-preload", 0, 0, OptionArg.NONE, ref fridmira_no_preload,
+			"Disable preload optimization with FridMira (for debugging)", null },
 		{ null }
 	};
 
@@ -60,6 +148,10 @@ namespace Frida.Server {
 		}
 #endif
 
+		// Process FridMira environment variables as default values
+		// 处理FridMira环境变量作为默认值
+		process_fridmira_environment_variables ();
+
 		try {
 			var ctx = new OptionContext ();
 			ctx.set_help_enabled (true);
@@ -71,6 +163,15 @@ namespace Frida.Server {
 			return 1;
 		}
 
+				// Validate FridMira sub-options
+		// 验证FridMira子选项
+		if (!fridmira_enabled && (fridmira_no_symbol || fridmira_no_thread || fridmira_no_rpc ||
+		                          fridmira_no_file || fridmira_no_gum || fridmira_no_preload)) {
+			printerr ("Error: FridMira sub-options (--no-symbol, --no-thread, --no-rpc, --no-file, --no-gum, --no-preload) require --fridmira to be enabled.\n");
+			printerr ("Run '%s --help' to see usage information.\n", args[0]);
+			return 1;
+		}
+
 		if (output_version) {
 			stdout.printf ("%s\n", version_string ());
 			return 0;
@@ -89,7 +190,17 @@ namespace Frida.Server {
 		}
 
 		var options = new ControlServiceOptions ();
-		options.enable_preload = enable_preload;
+		// Simplified preload control: FridMira blacklist mode is safe
+		// 简化preload控制：FridMira黑名单模式是安全的
+		if (fridmira_enabled && fridmira_no_preload) {
+			// User explicitly disabled preload with FridMira
+			// 用户明确禁用FridMira下的preload
+			options.enable_preload = false;
+		} else {
+			// Normal behavior: Use standard preload setting
+			// 正常行为：使用标准preload设置（FridMira黑名单模式不影响关键函数）
+			options.enable_preload = enable_preload;
+		}
 		options.report_crashes = report_crashes;
 
 #if (IOS || TVOS) && !HAVE_EMBEDDED_ASSETS
@@ -198,17 +309,43 @@ namespace Frida.Server {
 
 	private static int run_application (string? device_id, EndpointParameters endpoint_params, ControlServiceOptions options,
 			ReadyHandler on_ready) {
+		if (verbose) {
+			stdout.printf ("FridMira: Starting application...\n");
+		}
+
+		// CRITICAL: Set FridMira environment variables BEFORE any GUM/preload initialization
+		// 关键：在任何GUM/preload初始化之前设置FridMira环境变量
+		if (fridmira_enabled) {
+			if (verbose) {
+				stdout.printf ("FridMira: Setting environment variables for preload compatibility...\n");
+			}
+			// Set environment variables EARLY to ensure preload mechanism can read them
+			// 提前设置环境变量以确保preload机制能够读取它们
+			GLib.Environment.set_variable ("FRIDMIRA_MODE", "enabled", true);
+			GLib.Environment.set_variable ("FRIDMIRA_SYMBOL_MODE", fridmira_no_symbol ? "disabled" : "enabled", true);
+			GLib.Environment.set_variable ("FRIDMIRA_THREAD_MODE", fridmira_no_thread ? "disabled" : "enabled", true);
+			GLib.Environment.set_variable ("FRIDMIRA_RPC_MODE", fridmira_no_rpc ? "disabled" : "enabled", true);
+			GLib.Environment.set_variable ("FRIDMIRA_FILE_MODE", fridmira_no_file ? "disabled" : "enabled", true);
+			GLib.Environment.set_variable ("FRIDMIRA_GUM_MODE", fridmira_no_gum ? "disabled" : "enabled", true);
+		}
+
 		TemporaryDirectory.always_use ((directory != null) ? directory : DEFAULT_DIRECTORY);
 		TemporaryDirectory.use_sysroot (options.sysroot);
 
+		// Initialize FridMira framework if enabled (after environment variables are set)
+		// 如果启用则初始化FridMira框架（在环境变量设置后）
+		if (fridmira_enabled) {
+			if (verbose) {
+				stdout.printf ("FridMira: Initializing anti-detection framework...\n");
+			}
+			initialize_fridmira_framework ();
+		}
+
 		application = new Application (device_id, endpoint_params, options);
 
-		Posix.signal (Posix.Signal.INT, (sig) => {
-			application.stop ();
-		});
-		Posix.signal (Posix.Signal.TERM, (sig) => {
-			application.stop ();
-		});
+		// Setup improved signal handlers for graceful shutdown
+		// 设置改进的信号处理器以实现优雅关闭
+		setup_signal_handlers ();
 
 		if (on_ready != null) {
 			application.ready.connect (success => {
@@ -220,6 +357,44 @@ namespace Frida.Server {
 		return application.run ();
 	}
 
+	/**
+	 * Setup improved signal handlers for graceful shutdown
+	 * 设置改进的信号处理器以实现优雅关闭
+	 */
+	private static void setup_signal_handlers () {
+		if (verbose) {
+			stdout.printf ("FridMira: Configuring signal handlers for graceful shutdown...\n");
+		}
+
+		// Use safe signal handling that doesn't interfere with symbol obfuscation
+		// 使用不会干扰符号混淆的安全信号处理
+		Posix.signal (Posix.Signal.INT, (sig) => {
+			if (verbose) {
+				stdout.printf ("FridMira: Received SIGINT, shutting down gracefully...\n");
+			}
+
+			if (application != null) {
+				// Graceful shutdown to prevent segmentation fault
+				// 优雅关闭以防止段错误
+				application.stop ();
+			} else {
+				Posix.exit (0);
+			}
+		});
+
+		Posix.signal (Posix.Signal.TERM, (sig) => {
+			if (verbose) {
+				stdout.printf ("FridMira: Received SIGTERM, shutting down gracefully...\n");
+			}
+
+			if (application != null) {
+				application.stop ();
+			} else {
+				Posix.exit (0);
+			}
+		});
+	}
+
 	namespace Environment {
 		public extern void init ();
 		public extern void set_verbose_logging_enabled (bool enabled);
@@ -284,19 +459,31 @@ namespace Frida.Server {
 		}
 
 		private async void start () {
+			if (verbose) {
+				stdout.printf ("FridMira: Starting application services...\n");
+			}
+
 			try {
 				if (device_id != null && device_id != "local") {
+					if (verbose) {
+						stdout.printf ("FridMira: Connecting to remote device: %s\n", device_id);
+					}
 					manager = new DeviceManager.with_nonlocal_backends_only ();
-
 					var device = yield manager.get_device_by_id (device_id, 0, io_cancellable);
 					device.lost.connect (on_device_lost);
-
 					service = yield new ControlService.with_device (device, endpoint_params, options);
 				} else {
+					if (verbose) {
+						stdout.printf ("FridMira: Starting local control service...\n");
+					}
 					service = new ControlService (endpoint_params, options);
 				}
 
 				yield service.start (io_cancellable);
+
+				if (verbose) {
+					stdout.printf ("FridMira: Service started successfully\n");
+				}
 			} catch (GLib.Error e) {
 				if (e is IOError.CANCELLED)
 					return;
@@ -308,12 +495,19 @@ namespace Frida.Server {
 			}
 
 			Idle.add (() => {
+				if (verbose) {
+					stdout.printf ("FridMira: Application ready\n");
+				}
 				ready (true);
 				return false;
 			});
 		}
 
 		public void stop () {
+			if (verbose) {
+				stdout.printf ("FridMira: Stopping application...\n");
+			}
+
 			Idle.add (() => {
 				perform_stop.begin ();
 				return false;
@@ -321,26 +515,39 @@ namespace Frida.Server {
 		}
 
 		private async void perform_stop () {
-			if (stopping)
+			if (stopping) {
 				return;
+			}
 			stopping = true;
 
 			io_cancellable.cancel ();
 
 			try {
 				if (service != null) {
+					if (verbose) {
+						stdout.printf ("FridMira: Stopping control service...\n");
+					}
 					yield service.stop ();
 					service = null;
 				}
 
 				if (manager != null) {
+					if (verbose) {
+						stdout.printf ("FridMira: Closing device manager...\n");
+					}
 					yield manager.close ();
 					manager = null;
 				}
 			} catch (GLib.Error e) {
+				if (verbose) {
+					stdout.printf ("FridMira: Error during shutdown: %s\n", e.message);
+				}
 			}
 
 			Idle.add (() => {
+				if (verbose) {
+					stdout.printf ("FridMira: Shutdown complete\n");
+				}
 				loop.quit ();
 				return false;
 			});
@@ -357,4 +564,95 @@ namespace Frida.Server {
 
 		return new TlsCertificate.from_file (path);
 	}
+
+	/**
+	 * Initialize FridMira anti-detection framework
+	 * 初始化FridMira反检测框架
+	 *
+	 * This function sets up the FridMira framework with the specified configuration.
+	 * FridMira components are automatically activated based on environment variables.
+	 * 此函数使用指定配置设置FridMira框架。FridMira组件根据环境变量自动激活。
+	 */
+	private static void initialize_fridmira_framework () {
+		// Environment variables are already set in run_application() for preload compatibility
+		// 环境变量已在run_application()中设置以确保preload兼容性
+
+		// Initialize core FridMira components with actual functionality
+		// 使用实际功能初始化核心FridMira组件
+
+		// Initialize symbol obfuscator if enabled
+		// 如果启用则初始化符号混淆器
+		if (!fridmira_no_symbol) {
+			if (verbose) {
+				stdout.printf ("  Symbol obfuscator: enabled (framework ready)\n");
+			}
+		}
+
+		// Initialize thread obfuscator if enabled
+		// 如果启用则初始化线程混淆器
+		if (!fridmira_no_thread) {
+			// Initialize and demonstrate thread name obfuscator functionality
+			// 初始化线程名混淆器功能
+			string demo_thread = Frida.FridMiraThreadObfuscator.obfuscate_thread_name("frida-server-main-loop");
+			if (verbose) {
+				stdout.printf ("  Thread obfuscator: enabled (example: frida-server-main-loop -> %s)\n", demo_thread);
+			}
+		}
+
+		// Initialize RPC protocol enhancer if RPC obfuscation is enabled
+		// 如果启用RPC混淆则初始化RPC协议增强器
+		if (!fridmira_no_rpc) {
+			Frida.FridMiraRpcProtocolEnhancer.init ();
+			string protocol_id = Frida.FridMiraRpcProtocolEnhancer.get_protocol_id();
+			if (verbose) {
+				stdout.printf ("  RPC protocol enhancer: enabled (protocol: %s)\n", protocol_id);
+			}
+		}
+
+		// Initialize file/library name generator if enabled
+		// 如果启用则初始化文件/库名生成器
+		if (!fridmira_no_file) {
+			// Initialize and demonstrate file name generator functionality
+			// 初始化文件名生成器功能
+			string demo_lib = Frida.FridMiraLibNameGenerator.generate_lib_name();
+			string demo_socket = Frida.FridMiraLibNameGenerator.generate_realistic_socket_name();
+			if (verbose) {
+				stdout.printf ("  File/library name obfuscator: enabled (examples: lib=%s, socket=%s)\n", demo_lib, demo_socket);
+			}
+		}
+
+		// Initialize memory obfuscator if enabled
+		// 如果启用则初始化内存混淆器
+		if (!fridmira_no_gum) {
+			// Initialize and demonstrate memory identifier obfuscator functionality
+			// 初始化内存标识符混淆器功能
+			string demo_memory = Frida.FridMiraMemoryObfuscator.obfuscate_memory_identifier("frida_memory_region");
+			if (verbose) {
+				stdout.printf ("  GUM memory obfuscator: enabled (example: frida_memory_region -> %s)\n", demo_memory);
+			}
+		}
+
+		// Log successful initialization if verbose mode is enabled
+		// 如果启用详细模式则记录成功初始化
+		if (verbose) {
+			stdout.printf ("FridMira framework initialized successfully with active components:\n");
+			stdout.printf ("  Symbol obfuscation: %s\n", fridmira_no_symbol ? "disabled" : "enabled");
+			stdout.printf ("  Thread obfuscation: %s\n", fridmira_no_thread ? "disabled" : "enabled");
+			stdout.printf ("  RPC obfuscation: %s\n", fridmira_no_rpc ? "disabled" : "enabled");
+			stdout.printf ("  File obfuscation: %s\n", fridmira_no_file ? "disabled" : "enabled");
+			stdout.printf ("  GUM memory obfuscation: %s\n", fridmira_no_gum ? "disabled" : "enabled");
+
+			// Show preload status with reasoning
+			// 显示preload状态及原因
+			string preload_status;
+			if (fridmira_no_preload) {
+				preload_status = "disabled (--no-preload)";
+			} else if (enable_preload) {
+				preload_status = "enabled (blacklist mode)";
+			} else {
+				preload_status = "disabled (--disable-preload)";
+			}
+			stdout.printf ("  Preload optimization: %s\n", preload_status);
+		}
+	}
 }
-- 
2.45.1.windows.1

