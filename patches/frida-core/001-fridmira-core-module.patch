From 434d79a2c601bbd4ff62f796d88c79ddd8e39bf7 Mon Sep 17 00:00:00 2001
From: imkenf <imkenf@gmail.com>
Date: Tue, 17 Jun 2025 12:08:17 +0800
Subject: [PATCH 001/006] Add comprehensive anti-detection framework to
 lib/base

---
 lib/mira/fridmira.vala | 1062 ++++++++++++++++++++++++++++++++++++++++
 lib/mira/meson.build   |   15 +
 2 files changed, 1077 insertions(+)
 create mode 100644 lib/mira/fridmira.vala
 create mode 100644 lib/mira/meson.build

diff --git a/lib/mira/fridmira.vala b/lib/mira/fridmira.vala
new file mode 100644
index 0000000..a6ad633
--- /dev/null
+++ b/lib/mira/fridmira.vala
@@ -0,0 +1,1062 @@
+/**
+ * FridMira: Frida Anti-Detection Framework
+ * FridMira: Frida 反检测框架
+ *
+ * This module provides comprehensive anti-detection capabilities for Frida,
+ * including symbol obfuscation, thread name masking, protocol enhancement,
+ * and runtime signature randomization.
+ *
+ * 此模块为Frida提供全面的反检测能力，包括符号混淆、线程名掩盖、
+ * 协议增强和运行时签名随机化。
+ *
+ * All functionality is controlled via environment variables with granular
+ * per-feature control and global enable/disable switches.
+ *
+ * 所有功能通过环境变量控制，支持细粒度的单功能控制和全局开关。
+ */
+
+using Gee;
+
+namespace Frida {
+	/**
+	 * FridMiraSymbolObfuscator: Advanced Symbol Name Obfuscation Engine
+	 * FridMira符号混淆器：高级符号名混淆引擎
+	 *
+	 * Generates realistic-looking symbol names that blend in with system
+	 * libraries and native Android/iOS components to avoid detection.
+	 * Uses intelligent filtering to only obfuscate Frida-related symbols
+	 * while preserving system-critical symbols for stability.
+	 *
+	 * 生成仿系统的符号名，与系统库和原生Android/iOS组件融为一体，避免检测。
+	 * 使用智能过滤只混淆Frida相关符号，同时保护系统关键符号以确保稳定性。
+	 */
+	public class FridMiraSymbolObfuscator {
+		// Symbol name component arrays for realistic generation
+		// 用于生成仿系统符号名的组件数组
+		private static string[] get_symbol_prefixes() {
+			return {
+				"_lib", "_sys", "_core", "_util", "_base", "_native", "_android",
+				"_ios", "_darwin", "_linux", "_gnu", "_glibc", "_musl"
+			};
+		}
+
+		private static string[] get_symbol_components() {
+			return {
+				"init", "start", "stop", "create", "destroy", "alloc", "free",
+				"open", "close", "read", "write", "send", "recv", "connect",
+				"bind", "listen", "accept", "process", "handle", "execute",
+				"invoke", "call", "return", "exit", "main", "entry", "cleanup",
+				"malloc", "calloc", "realloc", "mmap", "munmap", "dlopen"
+			};
+		}
+
+		private static string[] get_symbol_suffixes() {
+			return {
+				"", "_impl", "_native", "_jni", "_internal", "_handler",
+				"_mgr", "_svc", "_fn", "_proc", "_wrapper", "_bridge"
+			};
+		}
+
+		/**
+		 * Default Frida signature symbols (built-in blacklist)
+		 * 默认Frida特征符号（内置黑名单）
+		 */
+		private static string[] get_default_frida_signatures() {
+			return {
+				// Safe Frida signatures that can be obfuscated
+				// 可以安全混淆的Frida特征符号
+
+				// Frida server signatures / Frida服务器特征
+				"frida_server", "frida-server", "FRIDA_SERVER",
+				"FridaServer", "fridaServer",
+
+				// Frida gadget signatures / Frida gadget特征
+				"frida_gadget", "frida-gadget", "FRIDA_GADGET",
+				"FridaGadget", "fridaGadget",
+
+				// Frida core signatures / Frida核心特征
+				"frida_core", "frida-core", "FRIDA_CORE",
+				"FridaCore", "fridaCore",
+
+				// Frida script and RPC signatures / Frida脚本和RPC特征
+				"frida_rpc", "frida-rpc", "FRIDA_RPC",
+				"frida_script", "frida-script", "FRIDA_SCRIPT",
+				"FridaScript", "fridaScript",
+
+				// Frida session and device signatures / Frida会话和设备特征
+				"frida_session", "frida-session", "FRIDA_SESSION",
+				"frida_device", "frida-device", "FRIDA_DEVICE",
+				"FridaDevice", "fridaDevice",
+
+				// Frida process and spawn signatures / Frida进程和spawn特征
+				"frida_process", "frida-process", "FRIDA_PROCESS",
+				"frida_spawn", "frida-spawn", "FRIDA_SPAWN",
+
+				// Additional safe frida patterns / 额外的安全frida模式
+				"frida_version", "frida_build", "frida_config",
+				"frida_error", "frida_warning", "frida_debug"
+
+				// NOTE: Excluded critical entry points:
+				// 注意：排除了关键入口点：
+				// - frida_agent_main (entry point)
+				// - gum_init/gum_deinit (core initialization)
+				// - frida_init/frida_deinit (core initialization)
+			};
+		}
+
+
+
+		/**
+		 * Load symbol blacklist from external configuration file
+		 * 从外部配置文件加载符号黑名单
+		 *
+		 * Configuration file format (one symbol per line):
+		 * 配置文件格式（每行一个符号）：
+		 *
+		 * # Comments start with #
+		 * frida_custom_function
+		 * my_frida_symbol
+		 * custom_detection_string
+		 */
+		private static string[] load_external_blacklist() {
+			var external_symbols = new Gee.ArrayList<string>();
+
+			// Check for configuration file paths in order of priority
+			// 按优先级顺序检查配置文件路径
+			string[] config_paths = {
+				// 1. Environment variable specified path / 环境变量指定路径
+				Environment.get_variable("FRIDMIRA_SYMBOL_CONFIG"),
+				// 2. Current directory / 当前目录
+				"./fridmira-symbols.conf",
+				// 3. User home directory / 用户主目录
+				Path.build_filename(Environment.get_home_dir(), ".fridmira-symbols.conf"),
+				// 4. System-wide configuration / 系统级配置
+				"/etc/fridmira/symbols.conf",
+				"/usr/local/etc/fridmira/symbols.conf"
+			};
+
+			foreach (string config_path in config_paths) {
+				if (config_path == null) continue;
+
+				try {
+					if (FileUtils.test(config_path, FileTest.EXISTS | FileTest.IS_REGULAR)) {
+						string content;
+						if (FileUtils.get_contents(config_path, out content)) {
+							parse_config_content(content, external_symbols);
+							if (Environment.get_variable("FRIDMIRA_VERBOSE") == "1") {
+								stderr.printf("FridMira: Loaded symbol blacklist from: %s\n", config_path);
+							}
+							break; // Use first found configuration file / 使用第一个找到的配置文件
+						}
+					}
+				} catch (Error e) {
+					if (Environment.get_variable("FRIDMIRA_VERBOSE") == "1") {
+						stderr.printf("FridMira: Warning - Failed to load config %s: %s\n", config_path, e.message);
+					}
+				}
+			}
+
+			return external_symbols.to_array();
+		}
+
+		/**
+		 * Parse configuration file content
+		 * 解析配置文件内容
+		 */
+		private static void parse_config_content(string content, Gee.ArrayList<string> symbols) {
+			string[] lines = content.split("\n");
+
+			foreach (string line in lines) {
+				string trimmed = line.strip();
+
+				// Skip empty lines and comments / 跳过空行和注释
+				if (trimmed.length == 0 || trimmed.has_prefix("#")) {
+					continue;
+				}
+
+				// Add valid symbol to list / 添加有效符号到列表
+				if (trimmed.length > 0) {
+					symbols.add(trimmed);
+				}
+			}
+		}
+
+		/**
+		 * Get complete symbol blacklist (built-in + external)
+		 * 获取完整符号黑名单（内置+外部）
+		 */
+		private static string[] get_frida_signature_symbols() {
+			var all_symbols = new Gee.ArrayList<string>();
+
+			// Add built-in symbols / 添加内置符号
+			foreach (string symbol in get_default_frida_signatures()) {
+				all_symbols.add(symbol);
+			}
+
+			// Add external symbols if configuration loading is enabled
+			// 如果启用配置加载则添加外部符号
+			string? use_external = Environment.get_variable("FRIDMIRA_USE_EXTERNAL_CONFIG");
+			if (use_external == null || use_external != "0") {
+				foreach (string symbol in load_external_blacklist()) {
+					if (!all_symbols.contains(symbol)) {
+						all_symbols.add(symbol);
+					}
+				}
+			}
+
+			return all_symbols.to_array();
+		}
+
+		/**
+		 * Check if symbol obfuscation is enabled via environment variables
+		 * 通过环境变量检查是否启用符号混淆
+		 *
+		 * Priority order: FRIDMIRA_SYMBOL_MODE > FRIDMIRA_MODE > default(enabled)
+		 * 优先级顺序：FRIDMIRA_SYMBOL_MODE > FRIDMIRA_MODE > 默认(启用)
+		 */
+		private static bool is_mode_enabled() {
+			// Check specific feature flag first / 优先检查功能开关
+			string? symbol_mode = Environment.get_variable("FRIDMIRA_SYMBOL_MODE");
+			if (symbol_mode != null) {
+				return symbol_mode != "0";
+			}
+
+			// Fall back to global flag (default enabled) / 回退到全局开关（默认启用）
+			string? global_mode = Environment.get_variable("FRIDMIRA_MODE");
+			return (global_mode != "0");
+		}
+
+				/**
+		 * Check if a symbol should be obfuscated (simple blacklist mode)
+		 * 检查符号是否应该被混淆（简单黑名单模式）
+		 *
+		 * SIMPLE RULE: Only obfuscate if symbol contains Frida signatures
+		 * 简单规则：只有包含Frida特征的符号才混淆
+		 */
+		private static bool should_obfuscate_symbol(string original_symbol) {
+			// Check if symbol contains any Frida signature
+			// 检查符号是否包含任何Frida特征
+			foreach (string signature in get_frida_signature_symbols()) {
+				if (original_symbol.contains(signature)) {
+					return true; // Safe to obfuscate / 可以安全混淆
+				}
+			}
+
+			// Default: keep original (safe approach)
+			// 默认：保持原样（安全方法）
+			return false;
+		}
+
+		/**
+		 * Generate obfuscated symbol name using simple blacklist mode
+		 * 使用简单黑名单模式生成混淆的符号名
+		 *
+		 * SIMPLE APPROACH: Only obfuscate known Frida signatures
+		 * 简单方法：只混淆已知的Frida特征符号
+		 */
+		public static string obfuscate_symbol(string original) {
+			if (!is_mode_enabled()) {
+				return original;
+			}
+
+			// Blacklist check: only obfuscate Frida signature symbols
+			// 黑名单检查：只混淆Frida特征符号
+			if (!should_obfuscate_symbol(original)) {
+				return original;
+			}
+
+			// Generate deterministic but unique seed / 生成确定性但唯一的种子
+			uint32 seed = (uint32)(GLib.get_real_time() % 1000000) ^ original.hash();
+			var random = new Rand.with_seed (seed);
+
+			var symbol_prefixes = get_symbol_prefixes();
+			var symbol_components = get_symbol_components();
+			var symbol_suffixes = get_symbol_suffixes();
+
+			string prefix = symbol_prefixes[random.int_range(0, symbol_prefixes.length)];
+			string component = symbol_components[random.int_range(0, symbol_components.length)];
+			string suffix = symbol_suffixes[random.int_range(0, symbol_suffixes.length)];
+
+			return prefix + component + suffix;
+		}
+
+		/**
+		 * Public API to check if symbol obfuscation is active
+		 * 公共API检查符号混淆是否激活
+		 */
+		public static bool is_enhanced_mode_enabled() {
+			return is_mode_enabled();
+		}
+	}
+
+	/**
+	 * FridMiraThreadObfuscator: Thread Name Masking Engine
+	 * FridMira线程混淆器：线程名掩盖引擎
+	 *
+	 * Replaces detectable thread names like "frida-server-main-loop"
+	 * with realistic system-like thread names.
+	 *
+	 * 将可检测的线程名如"frida-server-main-loop"替换为仿系统的系统线程名。
+	 */
+	public class FridMiraThreadObfuscator {
+		// Thread name component arrays for realistic generation
+		// 用于生成仿系统线程名的组件数组
+		private static string[] get_thread_prefixes() {
+			return {
+				"thread", "worker", "task", "job", "service", "handler", "process",
+				"daemon", "monitor", "watcher", "timer", "scheduler", "executor",
+				"async", "sync", "pool", "queue", "mgmt", "ctrl", "event"
+			};
+		}
+
+		private static string[] get_thread_components() {
+			return {
+				"main", "bg", "io", "net", "ui", "core", "util", "sys", "mgmt",
+				"ctrl", "data", "event", "signal", "async", "sync", "pool",
+				"work", "task", "job", "svc", "proc", "loop", "run", "exec"
+			};
+		}
+
+		private static string[] get_thread_suffixes() {
+			return {
+				"", "-1", "-2", "-pool", "-mgr", "-svc", "-loop", "-proc",
+				"-worker", "-handler", "-monitor", "-ctrl", "-th", "-0", "-bg"
+			};
+		}
+
+		/**
+		 * Check if thread name obfuscation is enabled
+		 * 检查是否启用线程名混淆
+		 *
+		 * Priority order: FRIDMIRA_THREAD_MODE > FRIDMIRA_MODE > default(enabled)
+		 * 优先级顺序：FRIDMIRA_THREAD_MODE > FRIDMIRA_MODE > 默认(启用)
+		 */
+		private static bool is_mode_enabled() {
+			// Check specific feature flag first / 优先检查功能开关
+			string? thread_mode = Environment.get_variable("FRIDMIRA_THREAD_MODE");
+			if (thread_mode != null) {
+				return thread_mode != "0";
+			}
+
+			// Fall back to global flag (default enabled) / 回退到全局开关（默认启用）
+			string? global_mode = Environment.get_variable("FRIDMIRA_MODE");
+			return (global_mode != "0");
+		}
+
+		/**
+		 * Generate realistic thread name that blends with system threads
+		 * 生成与系统线程融合的仿系统线程名
+		 *
+		 * Creates thread names that look like legitimate system components
+		 * to avoid detection by thread scanning tools.
+		 * 创建看起来像合法系统组件的线程名，避免被线程扫描工具检测。
+		 */
+		public static string obfuscate_thread_name(string original) {
+			if (!is_mode_enabled()) {
+				return original;
+			}
+
+			// Generate deterministic but unique seed / 生成确定性但唯一的种子
+			uint32 seed = (uint32)(GLib.get_real_time() % 1000000) ^ original.hash();
+			var random = new Rand.with_seed (seed);
+
+			var thread_prefixes = get_thread_prefixes();
+			var thread_components = get_thread_components();
+			var thread_suffixes = get_thread_suffixes();
+
+			string prefix = thread_prefixes[random.int_range(0, thread_prefixes.length)];
+			string component = thread_components[random.int_range(0, thread_components.length)];
+			string suffix = thread_suffixes[random.int_range(0, thread_suffixes.length)];
+
+			return prefix + "-" + component + suffix;
+		}
+
+		/**
+		 * Public API to check if thread obfuscation is active
+		 * 公共API检查线程混淆是否激活
+		 */
+		public static bool is_enhanced_mode_enabled() {
+			return is_mode_enabled();
+		}
+	}
+
+	/**
+	 * FridMiraMemoryObfuscator: Memory Region Identifier Masking
+	 * FridMira内存混淆器：内存区域标识符掩盖
+	 *
+	 * Provides obfuscation for memory-related identifiers and signatures
+	 * that could be used to detect Frida's presence in process memory.
+	 *
+	 * 为内存相关标识符和签名提供混淆，避免在进程内存中检测到Frida的存在。
+	 */
+	public class FridMiraMemoryObfuscator {
+		private static string[] get_memory_prefixes() {
+			return {
+				"mem", "buf", "heap", "stack", "seg", "region", "block", "chunk"
+			};
+		}
+
+		private static string[] get_memory_components() {
+			return {
+				"data", "code", "exec", "read", "write", "shared", "private", "anon"
+			};
+		}
+
+		/**
+		 * Generate obfuscated memory region identifier
+		 * 生成混淆的内存区域标识符
+		 */
+		public static string obfuscate_memory_identifier(string original) {
+			string? global_mode = Environment.get_variable("FRIDMIRA_MODE");
+			if (global_mode == "0") {
+				return original;
+			}
+
+			uint32 seed = (uint32)(GLib.get_real_time() % 1000000) ^ original.hash();
+			var random = new Rand.with_seed (seed);
+
+			var memory_prefixes = get_memory_prefixes();
+			var memory_components = get_memory_components();
+
+			string prefix = memory_prefixes[random.int_range(0, memory_prefixes.length)];
+			string component = memory_components[random.int_range(0, memory_components.length)];
+			uint id = random.int_range(1000, 9999);
+
+			return prefix + "_" + component + "_" + id.to_string();
+		}
+	}
+
+	/**
+	 * FridMiraProtocolEnhancer: Network Protocol Identifier Obfuscation
+	 * FridMira协议增强器：网络协议标识符混淆
+	 *
+	 * Masks network protocol signatures and identifiers used by Frida
+	 * to communicate with external tools and debuggers.
+	 *
+	 * 掩盖Frida用于与外部工具和调试器通信的网络协议签名和标识符。
+	 */
+	public class FridMiraProtocolEnhancer {
+		private static string[] get_protocol_prefixes() {
+			return {
+				"proto", "net", "comm", "ipc", "rpc", "msg", "data", "stream"
+			};
+		}
+
+		private static string[] get_protocol_components() {
+			return {
+				"ctrl", "data", "mgmt", "sync", "async", "req", "resp", "event"
+			};
+		}
+
+		/**
+		 * Generate obfuscated protocol identifier
+		 * 生成混淆的协议标识符
+		 */
+		public static string obfuscate_protocol_identifier(string original) {
+			string? global_mode = Environment.get_variable("FRIDMIRA_MODE");
+			if (global_mode == "0") {
+				return original;
+			}
+
+			uint32 seed = (uint32)(GLib.get_real_time() % 1000000) ^ original.hash();
+			var random = new Rand.with_seed (seed);
+
+			var protocol_prefixes = get_protocol_prefixes();
+			var protocol_components = get_protocol_components();
+
+			string prefix = protocol_prefixes[random.int_range(0, protocol_prefixes.length)];
+			string component = protocol_components[random.int_range(0, protocol_components.length)];
+
+			return prefix + "_" + component;
+		}
+	}
+
+	/**
+	 * FridMiraLibNameGenerator: Realistic Library and Socket Name Generation
+	 * FridMira库名生成器：仿系统库名和Socket名生成
+	 *
+	 * Generates realistic library names and Unix domain socket names that
+	 * blend in with system components to avoid detection.
+	 *
+	 * 生成仿系统的库名和Unix域socket名，与系统组件融为一体，避免检测。
+	 */
+	public class FridMiraLibNameGenerator {
+		// Library name component arrays / 库名组件数组
+		private static string[] get_lib_prefixes() {
+			return {
+				"lib", "android", "system", "native", "core", "runtime",
+				"platform", "framework", "service", "hal", "vendor", "bionic"
+			};
+		}
+
+		private static string[] get_lib_components() {
+			return {
+				"utils", "service", "manager", "handler", "process", "thread",
+				"memory", "network", "security", "crypto", "media", "graphics",
+				"audio", "camera", "sensor", "ui", "input", "display", "log"
+			};
+		}
+
+		private static string[] get_lib_suffixes() {
+			return {
+				"", "_native", "_jni", "_impl", "_core", "_base", "_v2", "_compat"
+			};
+		}
+
+		private static string[] get_socket_prefixes() {
+			return {
+				"sys", "android", "native", "service", "core", "base",
+				"platform", "framework", "hal", "vendor", "system", "init"
+			};
+		}
+
+		private static string[] get_socket_components() {
+			return {
+				"sock", "ipc", "ctrl", "mgmt", "svc", "handler",
+				"bridge", "proxy", "daemon", "worker", "helper", "monitor"
+			};
+		}
+
+		/**
+		 * Check if library name obfuscation is enabled
+		 * 检查是否启用库名混淆
+		 *
+		 * Priority order: FRIDMIRA_FILE_MODE > FRIDMIRA_MODE > default(enabled)
+		 * 优先级顺序：FRIDMIRA_FILE_MODE > FRIDMIRA_MODE > 默认(启用)
+		 */
+		private static bool is_mode_enabled() {
+			// Check specific feature flag first / 优先检查功能开关
+			string? file_mode = Environment.get_variable("FRIDMIRA_FILE_MODE");
+			if (file_mode != null) {
+				return file_mode != "0";
+			}
+
+			// Fall back to global flag (default enabled) / 回退到全局开关（默认启用）
+			string? global_mode = Environment.get_variable("FRIDMIRA_MODE");
+			return (global_mode != "0");
+		}
+
+		/**
+		 * Generate realistic library name for agent masquerading
+		 * 为代理伪装生成仿系统的库名
+		 *
+		 * Creates library names that mimic legitimate Android/system libraries
+		 * to avoid detection by static analysis tools.
+		 * 创建模仿合法Android/系统库的库名，避免被静态分析工具检测。
+		 */
+		public static string generate_lib_name() {
+			if (!is_mode_enabled()) {
+				return "frida-agent";
+			}
+
+			// Generate deterministic but time-varying seed / 生成确定性但时变的种子
+			uint32 seed = (uint32)(GLib.get_real_time() % 1000000);
+			var random = new Rand.with_seed (seed);
+
+			var lib_prefixes = get_lib_prefixes();
+			var lib_components = get_lib_components();
+			var lib_suffixes = get_lib_suffixes();
+
+			string prefix = lib_prefixes[random.int_range(0, lib_prefixes.length)];
+			string component = lib_components[random.int_range(0, lib_components.length)];
+			string suffix = lib_suffixes[random.int_range(0, lib_suffixes.length)];
+
+			return prefix + component + suffix;
+		}
+
+		/**
+		 * Generate realistic Unix domain socket name
+		 * 生成仿系统的Unix域socket名称
+		 *
+		 * Creates socket names that appear as legitimate system IPC endpoints
+		 * to avoid detection through /proc/net/unix scanning.
+		 * 创建看起来像合法系统IPC端点的socket名，避免通过/proc/net/unix扫描检测。
+		 */
+		public static string generate_realistic_socket_name() {
+			var socket_prefixes = get_socket_prefixes();
+			var socket_components = get_socket_components();
+
+			// Use custom PID and time for unique but realistic naming / 使用自定义PID和时间生成唯一但仿系统的命名
+			uint32 seed = (uint32)(GLib.get_real_time() % 1000000);
+			// Generate custom PID equivalent using high-precision timestamp combination
+			// 使用高精度时间戳组合生成自定义PID等价物
+			int64 time_us = GLib.get_real_time();
+			uint32 custom_pid = (uint32)((time_us >> 16) ^ (time_us & 0xFFFF));
+			var random = new Rand.with_seed (seed ^ custom_pid);
+
+			string prefix = socket_prefixes[random.int_range(0, socket_prefixes.length)];
+			string component = socket_components[random.int_range(0, socket_components.length)];
+			uint suffix_num = random.int_range(1, 999);
+
+			return prefix + "_" + component + "_" + suffix_num.to_string();
+		}
+
+		/**
+		 * Public API to check if file name obfuscation is active
+		 * 公共API检查文件名混淆是否激活
+		 */
+		public static bool is_enhanced_mode_enabled() {
+			return is_mode_enabled();
+		}
+	}
+
+	/**
+	 * FridMiraRpcProtocolEnhancer: Advanced RPC Protocol Obfuscation
+	 * FridMira RPC协议增强器：高级RPC协议混淆
+	 *
+	 * Provides comprehensive RPC protocol obfuscation including dynamic protocol
+	 * generation, session memory, adaptive protocol selection and bidirectional
+	 * command mapping to make traffic analysis extremely difficult.
+	 *
+	 * 提供全面的RPC协议混淆，包括动态协议生成、会话记忆、自适应协议选择
+	 * 和双向命令映射，使流量分析变得极其困难。
+	 */
+
+	// Protocol operation modes / 协议运行模式
+	public enum FridMiraProtocolMode {
+		STANDARD,    // 标准Frida协议
+		DYNAMIC,     // 动态随机协议
+		CUSTOM       // 自定义协议
+	}
+
+	public class FridMiraRpcProtocolEnhancer {
+		// Protocol mode and basic identifiers / 协议模式和基础标识符
+		private static FridMiraProtocolMode _mode = FridMiraProtocolMode.DYNAMIC;
+		private static string _protocol_id = "frida:rpc";
+		private static string _dynamic_protocol_id = "";
+		private static string _call_command = "call";
+		private static string _ok_response = "ok";
+		private static string _dynamic_call_command = "";
+		private static string _dynamic_ok_response = "";
+
+		// Legacy bidirectional command mapping / 传统双向命令映射
+		private static GLib.HashTable<string, string>? _command_map = null;
+		private static GLib.HashTable<string, string>? _reverse_map = null;
+
+		// Session memory for adaptive protocol selection / 会话记忆用于自适应协议选择
+		private static Gee.HashMap<string, string> _session_protocols = new Gee.HashMap<string, string>();
+		private static Gee.HashMap<string, string> _session_call_commands = new Gee.HashMap<string, string>();
+		private static Gee.HashMap<string, string> _session_ok_responses = new Gee.HashMap<string, string>();
+
+		// Dynamic protocol word libraries / 动态协议词库
+		private static string[] get_protocol_words() {
+			return {
+				"perf", "opt", "boost", "turbo", "fast", "speed", "cache", "mem"
+			};
+		}
+
+		private static string[] get_command_words() {
+			return {
+				"exec", "run", "proc", "task", "job", "work", "op", "act"
+			};
+		}
+
+		private static string[] get_response_words() {
+			return {
+				"done", "ready", "good", "pass", "yes", "ack", "fin", "end"
+			};
+		}
+
+		private static bool _enhanced_mode_enabled = false;
+		private static bool _initialized = false;
+
+		/**
+		 * Check if RPC protocol enhancement is enabled
+		 * 检查是否启用RPC协议增强
+		 *
+		 * Priority order: FRIDMIRA_RPC_MODE > FRIDMIRA_MODE > default(enabled)
+		 * 优先级顺序：FRIDMIRA_RPC_MODE > FRIDMIRA_MODE > 默认(启用)
+		 */
+		private static bool is_mode_enabled() {
+			// Check specific feature flag first / 优先检查功能开关
+			string? rpc_mode = Environment.get_variable("FRIDMIRA_RPC_MODE");
+			if (rpc_mode != null) {
+				return rpc_mode != "0";
+			}
+
+			// Fall back to global flag (default enabled) / 回退到全局开关（默认启用）
+			string? global_mode = Environment.get_variable("FRIDMIRA_MODE");
+			return (global_mode != "0");
+		}
+
+		/**
+		 * Generate dynamic protocols based on timestamp and randomization
+		 * 基于时间戳和随机化生成动态协议
+		 */
+		private static void generate_dynamic_protocols() {
+			// 基于时间戳和随机值生成动态协议
+			int64 timestamp = GLib.get_real_time() / 1000000; // 秒级时间戳
+			uint32 random_value = new Rand ().next_int ();
+
+			// 生成伪随机种子
+			uint32 seed = (uint32)(timestamp ^ random_value);
+			var random = new Rand.with_seed (seed);
+
+			var protocol_words = get_protocol_words();
+			var command_words = get_command_words();
+			var response_words = get_response_words();
+
+			// 选择随机协议词
+			string protocol_word = protocol_words[random.int_range(0, protocol_words.length)];
+			string call_word = command_words[random.int_range(0, command_words.length)];
+			string ok_word = response_words[random.int_range(0, response_words.length)];
+
+			// 添加动态后缀
+			string suffix = "%04x".printf(random.int_range(0x1000, 0xFFFF));
+
+			_dynamic_protocol_id = "%s%s:rpc".printf(protocol_word, suffix);
+			_dynamic_call_command = "%s%s".printf(call_word, suffix[0:2]);
+			_dynamic_ok_response = "%s%s".printf(ok_word, suffix[2:4]);
+		}
+
+		/**
+		 * Initialize the RPC protocol enhancer with comprehensive features
+		 * 使用全面功能初始化RPC协议增强器
+		 *
+		 * Creates command translation tables, initializes dynamic protocol
+		 * generation, and sets up session memory for adaptive behavior.
+		 * 创建命令转换表，初始化动态协议生成，并设置会话记忆以实现自适应行为。
+		 */
+		public static void init() {
+			if (_initialized) {
+				return;
+			}
+
+			_enhanced_mode_enabled = is_mode_enabled();
+
+			// Read advanced environment variable configuration
+			// 读取高级环境变量配置
+			string? mode_env = Environment.get_variable("FRIDMIRA_PRC");
+			string? custom_protocol = Environment.get_variable("FRIDMIRA_PRC_ID");
+			string? custom_call = Environment.get_variable("FRIDMIRA_PRC_CALL");
+			string? custom_ok = Environment.get_variable("FRIDMIRA_PRC_OK");
+
+			// Parse protocol mode / 解析协议模式
+			if (mode_env != null) {
+				switch (mode_env.down()) {
+					case "standard":
+						_mode = FridMiraProtocolMode.STANDARD;
+						break;
+					case "dynamic":
+						_mode = FridMiraProtocolMode.DYNAMIC;
+						break;
+					case "custom":
+						_mode = FridMiraProtocolMode.CUSTOM;
+						break;
+					default:
+						_mode = FridMiraProtocolMode.DYNAMIC;
+						break;
+				}
+			}
+
+			// Generate dynamic protocol identifiers / 生成动态协议标识符
+			if (_mode == FridMiraProtocolMode.DYNAMIC) {
+				generate_dynamic_protocols();
+			} else if (_mode == FridMiraProtocolMode.CUSTOM) {
+				_dynamic_protocol_id = custom_protocol ?? "custom:rpc";
+				_dynamic_call_command = custom_call ?? "invoke";
+				_dynamic_ok_response = custom_ok ?? "success";
+			}
+
+			// Initialize legacy bidirectional hash tables / 初始化传统双向哈希表
+			_command_map = new GLib.HashTable<string, string>(GLib.str_hash, GLib.str_equal);
+			_reverse_map = new GLib.HashTable<string, string>(GLib.str_hash, GLib.str_equal);
+
+			// Map standard Frida commands to obfuscated versions (legacy support)
+			// 将标准Frida命令映射到混淆版本（传统支持）
+			_command_map.insert("frida:rpc", "invoke:op");
+			_command_map.insert("call", "exec");
+			_command_map.insert("ok", "success");
+			_command_map.insert("error", "failure");
+			_command_map.insert("result", "output");
+			_command_map.insert("request", "invoke");
+
+			// Create reverse mapping for bidirectional translation (safe approach)
+			// 为双向转换创建反向映射（安全方法）
+			_reverse_map.insert("invoke:op", "frida:rpc");
+			_reverse_map.insert("exec", "call");
+			_reverse_map.insert("success", "ok");
+			_reverse_map.insert("failure", "error");
+			_reverse_map.insert("output", "result");
+			_reverse_map.insert("invoke", "request");
+
+			_initialized = true;
+		}
+
+		/**
+		 * Map standard command to obfuscated version
+		 * 将标准命令映射到混淆版本
+		 *
+		 * Translates Frida's standard RPC commands to obfuscated equivalents
+		 * when enhanced mode is enabled.
+		 * 在启用增强模式时，将Frida的标准RPC命令转换为混淆等价物。
+		 */
+		public static string map_command(string cmd) {
+			if (!_enhanced_mode_enabled) {
+				return cmd;
+			}
+
+			if (!_initialized) {
+				init();
+			}
+
+			string? mapped = _command_map.lookup(cmd);
+			return (mapped != null) ? mapped : cmd;
+		}
+
+		/**
+		 * Reverse map obfuscated command back to standard
+		 * 将混淆命令反向映射回标准版本
+		 *
+		 * Translates obfuscated commands back to standard Frida commands
+		 * for internal processing compatibility.
+		 * 将混淆命令转换回标准Frida命令，以保持内部处理兼容性。
+		 */
+		public static string reverse_map_command(string cmd) {
+			if (!_enhanced_mode_enabled) {
+				return cmd;
+			}
+
+			if (!_initialized) {
+				init();
+			}
+
+			string? mapped = _reverse_map.lookup(cmd);
+			return (mapped != null) ? mapped : cmd;
+		}
+
+		/**
+		 * Check if command is a known enhanced command
+		 * 检查命令是否为已知的增强命令
+		 *
+		 * Determines if the given command is one of our obfuscated commands
+		 * that needs reverse mapping.
+		 * 确定给定命令是否为需要反向映射的混淆命令之一。
+		 */
+		public static bool is_enhanced_command(string cmd) {
+			if (!_initialized) {
+				init();
+			}
+
+			return _reverse_map.contains(cmd);
+		}
+
+		/**
+		 * Public API to check if RPC obfuscation is active
+		 * 公共API检查RPC混淆是否激活
+		 */
+		public static bool is_enhanced_mode_enabled() {
+			return _enhanced_mode_enabled;
+		}
+
+		/**
+		 * Get protocol ID for RPC communication with session awareness
+		 * 获取具有会话感知的RPC通信协议ID
+		 */
+		public static string get_protocol_id(string? session_id = null) {
+			if (!_initialized) init();
+
+			if (session_id != null && _session_protocols.has_key(session_id)) {
+				return _session_protocols[session_id];
+			}
+
+			// Default to dynamic protocol (enhanced client priority)
+			// 默认使用动态协议（增强客户端优先）
+			return (_mode == FridMiraProtocolMode.STANDARD) ? _protocol_id : _dynamic_protocol_id;
+		}
+
+		/**
+		 * Get call command for RPC communication with session awareness
+		 * 获取具有会话感知的RPC通信调用命令
+		 */
+		public static string get_call_command(string? session_id = null) {
+			if (!_initialized) init();
+
+			if (session_id != null && _session_call_commands.has_key(session_id)) {
+				return _session_call_commands[session_id];
+			}
+
+			return (_mode == FridMiraProtocolMode.STANDARD) ? _call_command : _dynamic_call_command;
+		}
+
+		/**
+		 * Get OK response for RPC communication with session awareness
+		 * 获取具有会话感知的RPC通信OK响应
+		 */
+		public static string get_ok_response(string? session_id = null) {
+			if (!_initialized) init();
+
+			if (session_id != null && _session_ok_responses.has_key(session_id)) {
+				return _session_ok_responses[session_id];
+			}
+
+			return (_mode == FridMiraProtocolMode.STANDARD) ? _ok_response : _dynamic_ok_response;
+		}
+
+		/**
+		 * Remember session protocol type for adaptive behavior
+		 * 记录会话协议类型以实现自适应行为
+		 */
+		public static void remember_session_protocol(string session_id, string protocol) {
+			if (!_initialized) init();
+
+			if (protocol == _protocol_id) {
+				// Standard client - remember using standard protocol
+				// 标准客户端 - 记住使用标准协议
+				_session_protocols[session_id] = _protocol_id;
+				_session_call_commands[session_id] = _call_command;
+				_session_ok_responses[session_id] = _ok_response;
+			} else if (protocol == _dynamic_protocol_id) {
+				// Enhanced client - remember using dynamic protocol
+				// 增强客户端 - 记住使用动态协议
+				_session_protocols[session_id] = _dynamic_protocol_id;
+				_session_call_commands[session_id] = _dynamic_call_command;
+				_session_ok_responses[session_id] = _dynamic_ok_response;
+			}
+		}
+
+		/**
+		 * Clear session memory
+		 * 清理会话记忆
+		 */
+		public static void forget_session(string session_id) {
+			_session_protocols.unset(session_id);
+			_session_call_commands.unset(session_id);
+			_session_ok_responses.unset(session_id);
+		}
+
+		/**
+		 * Get current dynamic protocol ID for protocol detection
+		 * 获取当前动态协议ID用于协议检测
+		 */
+		public static string get_dynamic_protocol_id() {
+			if (!_initialized) init();
+			return _dynamic_protocol_id;
+		}
+
+		/**
+		 * Dual protocol support: check if protocol identifier is valid
+		 * 双协议支持：检查协议标识符是否有效
+		 */
+		public static bool is_valid_protocol(string protocol) {
+			if (!_initialized) init();
+
+			// Always support standard protocol (backward compatibility)
+			// 始终支持标准协议（向后兼容）
+			if (protocol == _protocol_id) return true;
+
+			// Support dynamic protocol (if enabled)
+			// 支持动态协议（如果启用）
+			if (_mode != FridMiraProtocolMode.STANDARD && protocol == _dynamic_protocol_id) {
+				return true;
+			}
+
+			return false;
+		}
+
+		/**
+		 * Dual protocol support: check if OK response status is valid
+		 * 双协议支持：检查OK响应状态是否有效
+		 */
+		public static bool is_valid_ok_response(string status) {
+			if (!_initialized) init();
+
+			// Always support standard response
+			// 始终支持标准响应
+			if (status == _ok_response) return true;
+
+			// Support dynamic response (if enabled)
+			// 支持动态响应（如果启用）
+			if (_mode != FridMiraProtocolMode.STANDARD && status == _dynamic_ok_response) {
+				return true;
+			}
+
+			return false;
+		}
+
+		/**
+		 * Generate random request ID prefix for additional obfuscation
+		 * 生成随机请求ID前缀以增加额外混淆
+		 *
+		 * Adds randomized prefixes to request IDs to further mask
+		 * the communication pattern from traffic analysis.
+		 * 为请求ID添加随机前缀，进一步掩盖流量分析中的通信模式。
+		 */
+		public static string generate_request_id_prefix() {
+			if (!_enhanced_mode_enabled) {
+				return "";
+			}
+
+			string[] prefixes = {"req", "id", "op", "cmd", "task", "job", "call"};
+			var random = new Rand ();
+			var random_index = random.int_range(0, prefixes.length);
+			return prefixes[random_index] + "_";
+		}
+	}
+
+	public class FridMira {
+		/**
+		 * Initialize FridMira anti-detection framework
+		 * 初始化FridMira反检测框架
+		 *
+		 * This function sets up the FridMira framework with the specified configuration.
+		 * FridMira components are automatically activated based on environment variables.
+		 * 此函数使用指定配置设置FridMira框架。FridMira组件根据环境变量自动激活。
+		 *
+		 * This function is designed to be called from control-service.vala after preload
+		 * completion to implement the "post-preload initialization" strategy.
+		 * 此函数设计为在preload完成后从control-service.vala调用，以实现"预加载后初始化"策略。
+		 *
+		 * @internal This function is for internal FridMira use only and should not be
+		 * exposed in the public Frida API.
+		 */
+		[CCode (cname = "_frida_internal_init_fridmira")]
+		public static void initialize_fridmira_framework () throws IOError {
+			// EMERGENCY FIX: Minimal safe initialization to prevent crashes
+			// 紧急修复：最小安全初始化以防止崩溃
+
+			// Check if FridMira is enabled via environment variable
+			// 通过环境变量检查FridMira是否启用
+			string? fridmira_mode = GLib.Environment.get_variable ("FRIDMIRA_MODE");
+			if (fridmira_mode == null || fridmira_mode.down () != "enabled") {
+				// FridMira not enabled, skip initialization
+				// FridMira未启用，跳过初始化
+				return;
+			}
+
+			bool verbose = GLib.Environment.get_variable ("FRIDA_VERBOSE") == "1";
+
+			if (verbose) {
+				stdout.printf ("FridMira: Starting minimal safe initialization...\n");
+			}
+
+			// Only perform basic environment variable validation - no complex component initialization
+			// 仅执行基本环境变量验证 - 不进行复杂组件初始化
+			// Note: Avoiding Environment.set_variable to prevent potential crashes
+			// 注意：避免使用Environment.set_variable以防止潜在崩溃
+
+			string? symbol_mode = GLib.Environment.get_variable ("FRIDMIRA_SYMBOL_MODE");
+			string? thread_mode = GLib.Environment.get_variable ("FRIDMIRA_THREAD_MODE");
+			string? rpc_mode = GLib.Environment.get_variable ("FRIDMIRA_RPC_MODE");
+			string? file_mode = GLib.Environment.get_variable ("FRIDMIRA_FILE_MODE");
+			string? gum_mode = GLib.Environment.get_variable ("FRIDMIRA_GUM_MODE");
+
+			// Log successful minimal initialization if verbose mode is enabled
+			// 如果启用详细模式则记录成功的最小初始化
+			if (verbose) {
+				stdout.printf ("FridMira framework safely initialized with configuration:\n");
+				stdout.printf ("  Symbol obfuscation: %s\n",
+					(symbol_mode != null && symbol_mode.down () == "disabled") ? "disabled" : "enabled");
+				stdout.printf ("  Thread obfuscation: %s\n",
+					(thread_mode != null && thread_mode.down () == "disabled") ? "disabled" : "enabled");
+				stdout.printf ("  RPC obfuscation: %s\n",
+					(rpc_mode != null && rpc_mode.down () == "disabled") ? "disabled" : "enabled");
+				stdout.printf ("  File obfuscation: %s\n",
+					(file_mode != null && file_mode.down () == "disabled") ? "disabled" : "enabled");
+				stdout.printf ("  GUM memory obfuscation: %s\n",
+					(gum_mode != null && gum_mode.down () == "disabled") ? "disabled" : "enabled");
+				stdout.printf ("  Note: Component initialization deferred for stability\n");
+			}
+		}
+	}
+}
diff --git a/lib/mira/meson.build b/lib/mira/meson.build
new file mode 100644
index 0000000..448cd1e
--- /dev/null
+++ b/lib/mira/meson.build
@@ -0,0 +1,15 @@
+mira_sources = [
+  'fridmira.vala',
+]
+
+mira_lib = static_library('frida-mira', mira_sources,
+  vala_args: base_vala_args,
+  c_args: frida_component_cflags,
+  dependencies: [glib_dep, gobject_dep, gio_dep, base_dep],
+  install: false,
+)
+
+mira_dep = declare_dependency(
+  link_with: mira_lib,
+  include_directories: include_directories('.'),
+)
-- 
2.45.1.windows.1

